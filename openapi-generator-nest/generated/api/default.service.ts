/**
 * JSONPlaceholder
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional } from '@nestjs/common';
import { HttpService } from '@nestjs/axios';
import { AxiosResponse } from 'axios';
import { Observable } from 'rxjs';
import { Post } from '../model/post';
import { Configuration } from '../configuration';

@Injectable()
export class DefaultService {
  protected basePath = 'https://jsonplaceholder.typicode.com';
  public defaultHeaders: Record<string, string> = {};
  public configuration = new Configuration();

  constructor(
    protected httpClient: HttpService,
    @Optional() configuration: Configuration,
  ) {
    this.configuration = configuration || this.configuration;
    this.basePath = configuration?.basePath || this.basePath;
  }

  /**
   * @param consumes string[] mime-types
   * @return true: consumes contains 'multipart/form-data', false: otherwise
   */
  private canConsumeForm(consumes: string[]): boolean {
    const form = 'multipart/form-data';
    return consumes.includes(form);
  }

  /**
   *
   * Get posts
   * @param userId Filter results by user ID
   * @param title Filter results by title
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postsGet(
    userId?: number,
    title?: string,
  ): Observable<AxiosResponse<Array<Post>>>;
  public postsGet(userId?: number, title?: string): Observable<any> {
    let queryParameters = new URLSearchParams();
    if (userId !== undefined && userId !== null) {
      queryParameters.append('userId', <any>userId);
    }
    if (title !== undefined && title !== null) {
      queryParameters.append('title', <any>title);
    }

    let headers = { ...this.defaultHeaders };

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.get<Array<Post>>(`${this.basePath}/posts`, {
      params: queryParameters,
      withCredentials: this.configuration.withCredentials,
      headers: headers,
    });
  }
  /**
   *
   * Create post
   * @param post
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postsPost(post: Post): Observable<AxiosResponse<Post>>;
  public postsPost(post: Post): Observable<any> {
    if (post === null || post === undefined) {
      throw new Error(
        'Required parameter post was null or undefined when calling postsPost.',
      );
    }

    let headers = { ...this.defaultHeaders };

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers['Content-Type'] = httpContentTypeSelected;
    }
    return this.httpClient.post<Post>(`${this.basePath}/posts`, post, {
      withCredentials: this.configuration.withCredentials,
      headers: headers,
    });
  }
  /**
   *
   * Delete post
   * @param postId key: id of post
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postsPostIdDelete(postId: number): Observable<AxiosResponse<any>>;
  public postsPostIdDelete(postId: number): Observable<any> {
    if (postId === null || postId === undefined) {
      throw new Error(
        'Required parameter postId was null or undefined when calling postsPostIdDelete.',
      );
    }

    let headers = { ...this.defaultHeaders };

    // to determine the Accept header
    let httpHeaderAccepts: string[] = [];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.delete<any>(
      `${this.basePath}/posts/${encodeURIComponent(String(postId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      },
    );
  }
  /**
   *
   * Get post by ID
   * @param postId key: id of post
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postsPostIdGet(postId: number): Observable<AxiosResponse<Post>>;
  public postsPostIdGet(postId: number): Observable<any> {
    if (postId === null || postId === undefined) {
      throw new Error(
        'Required parameter postId was null or undefined when calling postsPostIdGet.',
      );
    }

    let headers = { ...this.defaultHeaders };

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = [];
    return this.httpClient.get<Post>(
      `${this.basePath}/posts/${encodeURIComponent(String(postId))}`,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      },
    );
  }
  /**
   *
   * Update post
   * @param postId key: id of post
   * @param post
   * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
   * @param reportProgress flag to report request and response progress.
   */
  public postsPostIdPatch(
    postId: number,
    post: Post,
  ): Observable<AxiosResponse<Post>>;
  public postsPostIdPatch(postId: number, post: Post): Observable<any> {
    if (postId === null || postId === undefined) {
      throw new Error(
        'Required parameter postId was null or undefined when calling postsPostIdPatch.',
      );
    }

    if (post === null || post === undefined) {
      throw new Error(
        'Required parameter post was null or undefined when calling postsPostIdPatch.',
      );
    }

    let headers = { ...this.defaultHeaders };

    // to determine the Accept header
    let httpHeaderAccepts: string[] = ['application/json'];
    const httpHeaderAcceptSelected: string | undefined =
      this.configuration.selectHeaderAccept(httpHeaderAccepts);
    if (httpHeaderAcceptSelected != undefined) {
      headers['Accept'] = httpHeaderAcceptSelected;
    }

    // to determine the Content-Type header
    const consumes: string[] = ['application/json'];
    const httpContentTypeSelected: string | undefined =
      this.configuration.selectHeaderContentType(consumes);
    if (httpContentTypeSelected != undefined) {
      headers['Content-Type'] = httpContentTypeSelected;
    }
    return this.httpClient.patch<Post>(
      `${this.basePath}/posts/${encodeURIComponent(String(postId))}`,
      post,
      {
        withCredentials: this.configuration.withCredentials,
        headers: headers,
      },
    );
  }
}
